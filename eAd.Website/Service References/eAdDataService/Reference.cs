//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eAd.Website.eAdDataService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="eAdDataService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetHi", ReplyAction="http://tempuri.org/IService/GetHiResponse")]
        string GetHi();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetHi", ReplyAction="http://tempuri.org/IService/GetHiResponse")]
        System.IAsyncResult BeginGetHi(System.AsyncCallback callback, object asyncState);
        
        string EndGetHi(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFile", ReplyAction="http://tempuri.org/IService/UploadFileResponse")]
        void UploadFile(eAd.DataAccess.FileMetaData MetaData, System.IO.FileStream stream);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/UploadFile", ReplyAction="http://tempuri.org/IService/UploadFileResponse")]
        System.IAsyncResult BeginUploadFile(eAd.DataAccess.FileMetaData MetaData, System.IO.FileStream stream, System.AsyncCallback callback, object asyncState);
        
        void EndUploadFile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper name (FileDownloadMessage) of message FileDownloadMessage does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DownloadFile", ReplyAction="http://tempuri.org/IService/DownloadFileResponse")]
        eAd.Website.eAdDataService.FileDownloadReturnMessage DownloadFile(eAd.Website.eAdDataService.FileDownloadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DownloadFile", ReplyAction="http://tempuri.org/IService/DownloadFileResponse")]
        System.IAsyncResult BeginDownloadFile(eAd.Website.eAdDataService.FileDownloadMessage request, System.AsyncCallback callback, object asyncState);
        
        eAd.Website.eAdDataService.FileDownloadReturnMessage EndDownloadFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SayHi", ReplyAction="http://tempuri.org/IService/SayHiResponse")]
        string SayHi(long clientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/SayHi", ReplyAction="http://tempuri.org/IService/SayHiResponse")]
        System.IAsyncResult BeginSayHi(long clientID, System.AsyncCallback callback, object asyncState);
        
        string EndSayHi(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SayHiKey", ReplyAction="http://tempuri.org/IService/SayHiKeyResponse")]
        string SayHiKey(string hardwareKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/SayHiKey", ReplyAction="http://tempuri.org/IService/SayHiKeyResponse")]
        System.IAsyncResult BeginSayHiKey(string hardwareKey, System.AsyncCallback callback, object asyncState);
        
        string EndSayHiKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMyMedia", ReplyAction="http://tempuri.org/IService/GetMyMediaResponse")]
        eAd.DataViewModels.MediaListModel[] GetMyMedia(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetMyMedia", ReplyAction="http://tempuri.org/IService/GetMyMediaResponse")]
        System.IAsyncResult BeginGetMyMedia(long stationID, System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.MediaListModel[] EndGetMyMedia(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMediaDuration", ReplyAction="http://tempuri.org/IService/GetMediaDurationResponse")]
        System.TimeSpan GetMediaDuration(long mediaID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetMediaDuration", ReplyAction="http://tempuri.org/IService/GetMediaDurationResponse")]
        System.IAsyncResult BeginGetMediaDuration(long mediaID, System.AsyncCallback callback, object asyncState);
        
        System.TimeSpan EndGetMediaDuration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetStationStatus", ReplyAction="http://tempuri.org/IService/SetStationStatusResponse")]
        void SetStationStatus(long stationID, string status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/SetStationStatus", ReplyAction="http://tempuri.org/IService/SetStationStatusResponse")]
        System.IAsyncResult BeginSetStationStatus(long stationID, string status, System.AsyncCallback callback, object asyncState);
        
        void EndSetStationStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DoIHaveUpdates", ReplyAction="http://tempuri.org/IService/DoIHaveUpdatesResponse")]
        bool DoIHaveUpdates(long clientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DoIHaveUpdates", ReplyAction="http://tempuri.org/IService/DoIHaveUpdatesResponse")]
        System.IAsyncResult BeginDoIHaveUpdates(long clientID, System.AsyncCallback callback, object asyncState);
        
        bool EndDoIHaveUpdates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DoIHaveUpdatesKey", ReplyAction="http://tempuri.org/IService/DoIHaveUpdatesKeyResponse")]
        bool DoIHaveUpdatesKey(string hardwareKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DoIHaveUpdatesKey", ReplyAction="http://tempuri.org/IService/DoIHaveUpdatesKeyResponse")]
        System.IAsyncResult BeginDoIHaveUpdatesKey(string hardwareKey, System.AsyncCallback callback, object asyncState);
        
        bool EndDoIHaveUpdatesKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMosaicForStation", ReplyAction="http://tempuri.org/IService/GetMosaicForStationResponse")]
        eAd.DataAccess.Mosaic GetMosaicForStation(long clientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetMosaicForStation", ReplyAction="http://tempuri.org/IService/GetMosaicForStationResponse")]
        System.IAsyncResult BeginGetMosaicForStation(long clientID, System.AsyncCallback callback, object asyncState);
        
        eAd.DataAccess.Mosaic EndGetMosaicForStation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMosaicForStationKey", ReplyAction="http://tempuri.org/IService/GetMosaicForStationKeyResponse")]
        eAd.DataAccess.Mosaic GetMosaicForStationKey(string hardwareKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetMosaicForStationKey", ReplyAction="http://tempuri.org/IService/GetMosaicForStationKeyResponse")]
        System.IAsyncResult BeginGetMosaicForStationKey(string hardwareKey, System.AsyncCallback callback, object asyncState);
        
        eAd.DataAccess.Mosaic EndGetMosaicForStationKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MakeStationUnAvailable", ReplyAction="http://tempuri.org/IService/MakeStationUnAvailableResponse")]
        bool MakeStationUnAvailable(long stationID, string rfidCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/MakeStationUnAvailable", ReplyAction="http://tempuri.org/IService/MakeStationUnAvailableResponse")]
        System.IAsyncResult BeginMakeStationUnAvailable(long stationID, string rfidCode, System.AsyncCallback callback, object asyncState);
        
        bool EndMakeStationUnAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMediaLocation", ReplyAction="http://tempuri.org/IService/GetMediaLocationResponse")]
        string GetMediaLocation(long mediaID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetMediaLocation", ReplyAction="http://tempuri.org/IService/GetMediaLocationResponse")]
        System.IAsyncResult BeginGetMediaLocation(long mediaID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMediaLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMosaicIDForStation", ReplyAction="http://tempuri.org/IService/GetMosaicIDForStationResponse")]
        long GetMosaicIDForStation(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetMosaicIDForStation", ReplyAction="http://tempuri.org/IService/GetMosaicIDForStationResponse")]
        System.IAsyncResult BeginGetMosaicIDForStation(long stationID, System.AsyncCallback callback, object asyncState);
        
        long EndGetMosaicIDForStation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMosaicIDForStationKey", ReplyAction="http://tempuri.org/IService/GetMosaicIDForStationKeyResponse")]
        long GetMosaicIDForStationKey(string hardwareKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetMosaicIDForStationKey", ReplyAction="http://tempuri.org/IService/GetMosaicIDForStationKeyResponse")]
        System.IAsyncResult BeginGetMosaicIDForStationKey(string hardwareKey, System.AsyncCallback callback, object asyncState);
        
        long EndGetMosaicIDForStationKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPositionsForMosaic", ReplyAction="http://tempuri.org/IService/GetPositionsForMosaicResponse")]
        eAd.DataViewModels.PositionViewModel[] GetPositionsForMosaic(long mosaicID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetPositionsForMosaic", ReplyAction="http://tempuri.org/IService/GetPositionsForMosaicResponse")]
        System.IAsyncResult BeginGetPositionsForMosaic(long mosaicID, System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.PositionViewModel[] EndGetPositionsForMosaic(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MakeStationAvailable", ReplyAction="http://tempuri.org/IService/MakeStationAvailableResponse")]
        bool MakeStationAvailable(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/MakeStationAvailable", ReplyAction="http://tempuri.org/IService/MakeStationAvailableResponse")]
        System.IAsyncResult BeginMakeStationAvailable(long stationID, System.AsyncCallback callback, object asyncState);
        
        bool EndMakeStationAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MessageRead", ReplyAction="http://tempuri.org/IService/MessageReadResponse")]
        bool MessageRead(long messageID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/MessageRead", ReplyAction="http://tempuri.org/IService/MessageReadResponse")]
        System.IAsyncResult BeginMessageRead(long messageID, System.AsyncCallback callback, object asyncState);
        
        bool EndMessageRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CaptureScreenShot", ReplyAction="http://tempuri.org/IService/CaptureScreenShotResponse")]
        bool CaptureScreenShot(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CaptureScreenShot", ReplyAction="http://tempuri.org/IService/CaptureScreenShotResponse")]
        System.IAsyncResult BeginCaptureScreenShot(long stationID, System.AsyncCallback callback, object asyncState);
        
        bool EndCaptureScreenShot(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCustomerByRFID", ReplyAction="http://tempuri.org/IService/GetCustomerByRFIDResponse")]
        eAd.DataViewModels.CustomerViewModel GetCustomerByRFID(string tag);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetCustomerByRFID", ReplyAction="http://tempuri.org/IService/GetCustomerByRFIDResponse")]
        System.IAsyncResult BeginGetCustomerByRFID(string tag, System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.CustomerViewModel EndGetCustomerByRFID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMessageToStation", ReplyAction="http://tempuri.org/IService/SendMessageToStationResponse")]
        bool SendMessageToStation(long stationID, eAd.DataViewModels.MessageViewModel message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/SendMessageToStation", ReplyAction="http://tempuri.org/IService/SendMessageToStationResponse")]
        System.IAsyncResult BeginSendMessageToStation(long stationID, eAd.DataViewModels.MessageViewModel message, System.AsyncCallback callback, object asyncState);
        
        bool EndSendMessageToStation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMessageToGroup", ReplyAction="http://tempuri.org/IService/SendMessageToGroupResponse")]
        bool SendMessageToGroup(long groupID, eAd.DataViewModels.MessageViewModel message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/SendMessageToGroup", ReplyAction="http://tempuri.org/IService/SendMessageToGroupResponse")]
        System.IAsyncResult BeginSendMessageToGroup(long groupID, eAd.DataViewModels.MessageViewModel message, System.AsyncCallback callback, object asyncState);
        
        bool EndSendMessageToGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMyMessages", ReplyAction="http://tempuri.org/IService/GetAllMyMessagesResponse")]
        eAd.DataViewModels.MessageViewModel[] GetAllMyMessages(long clientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetAllMyMessages", ReplyAction="http://tempuri.org/IService/GetAllMyMessagesResponse")]
        System.IAsyncResult BeginGetAllMyMessages(long clientID, System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.MessageViewModel[] EndGetAllMyMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMyMessagesKey", ReplyAction="http://tempuri.org/IService/GetAllMyMessagesKeyResponse")]
        eAd.DataViewModels.MessageViewModel[] GetAllMyMessagesKey(string hardwareKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetAllMyMessagesKey", ReplyAction="http://tempuri.org/IService/GetAllMyMessagesKeyResponse")]
        System.IAsyncResult BeginGetAllMyMessagesKey(string hardwareKey, System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.MessageViewModel[] EndGetAllMyMessagesKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCustomers", ReplyAction="http://tempuri.org/IService/GetAllCustomersResponse")]
        eAd.DataViewModels.CustomerViewModel[] GetAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetAllCustomers", ReplyAction="http://tempuri.org/IService/GetAllCustomersResponse")]
        System.IAsyncResult BeginGetAllCustomers(System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.CustomerViewModel[] EndGetAllCustomers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStations", ReplyAction="http://tempuri.org/IService/GetAllStationsResponse")]
        eAd.DataViewModels.StationViewModel[] GetAllStations();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetAllStations", ReplyAction="http://tempuri.org/IService/GetAllStationsResponse")]
        System.IAsyncResult BeginGetAllStations(System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.StationViewModel[] EndGetAllStations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOnlineStations", ReplyAction="http://tempuri.org/IService/GetOnlineStationsResponse")]
        eAd.DataViewModels.StationViewModel[] GetOnlineStations();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetOnlineStations", ReplyAction="http://tempuri.org/IService/GetOnlineStationsResponse")]
        System.IAsyncResult BeginGetOnlineStations(System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.StationViewModel[] EndGetOnlineStations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterDisplay", ReplyAction="http://tempuri.org/IService/RegisterDisplayResponse")]
        string RegisterDisplay(string serverKey, string hardwareKey, string displayName, string version);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/RegisterDisplay", ReplyAction="http://tempuri.org/IService/RegisterDisplayResponse")]
        System.IAsyncResult BeginRegisterDisplay(string serverKey, string hardwareKey, string displayName, string version, System.AsyncCallback callback, object asyncState);
        
        string EndRegisterDisplay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RequiredFiles", ReplyAction="http://tempuri.org/IService/RequiredFilesResponse")]
        eAd.DataViewModels.FilesModel RequiredFiles(string serverKey, string hardwareKey, string version);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/RequiredFiles", ReplyAction="http://tempuri.org/IService/RequiredFilesResponse")]
        System.IAsyncResult BeginRequiredFiles(string serverKey, string hardwareKey, string version, System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.FilesModel EndRequiredFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFile", ReplyAction="http://tempuri.org/IService/GetFileResponse")]
        byte[] GetFile(string serverKey, string hardwareKey, string filePath, string fileType, long chunkOffset, long chuckSize, string version);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetFile", ReplyAction="http://tempuri.org/IService/GetFileResponse")]
        System.IAsyncResult BeginGetFile(string serverKey, string hardwareKey, string filePath, string fileType, long chunkOffset, long chuckSize, string version, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Schedule", ReplyAction="http://tempuri.org/IService/ScheduleResponse")]
        eAd.DataViewModels.ScheduleModel Schedule(string serverKey, string hardwareKey, string version);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/Schedule", ReplyAction="http://tempuri.org/IService/ScheduleResponse")]
        System.IAsyncResult BeginSchedule(string serverKey, string hardwareKey, string version, System.AsyncCallback callback, object asyncState);
        
        eAd.DataViewModels.ScheduleModel EndSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RecieveXmlLog", ReplyAction="http://tempuri.org/IService/RecieveXmlLogResponse")]
        bool RecieveXmlLog(string serverKey, string hardwareKey, string xml, string version);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/RecieveXmlLog", ReplyAction="http://tempuri.org/IService/RecieveXmlLogResponse")]
        System.IAsyncResult BeginRecieveXmlLog(string serverKey, string hardwareKey, string xml, string version, System.AsyncCallback callback, object asyncState);
        
        bool EndRecieveXmlLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BlackList", ReplyAction="http://tempuri.org/IService/BlackListResponse")]
        void BlackList(string serverKey, string hardwareKey, int mediaId, string type, string reason, string version);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/BlackList", ReplyAction="http://tempuri.org/IService/BlackListResponse")]
        System.IAsyncResult BeginBlackList(string serverKey, string hardwareKey, int mediaId, string type, string reason, string version, System.AsyncCallback callback, object asyncState);
        
        void EndBlackList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SubmitLog", ReplyAction="http://tempuri.org/IService/SubmitLogResponse")]
        bool SubmitLog(string version, string serverKey, string hardwareKey, string logXml);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/SubmitLog", ReplyAction="http://tempuri.org/IService/SubmitLogResponse")]
        System.IAsyncResult BeginSubmitLog(string version, string serverKey, string hardwareKey, string logXml, System.AsyncCallback callback, object asyncState);
        
        bool EndSubmitLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SubmitStats", ReplyAction="http://tempuri.org/IService/SubmitStatsResponse")]
        bool SubmitStats(string version, string serverKey, string hardwareKey, string statXml);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/SubmitStats", ReplyAction="http://tempuri.org/IService/SubmitStatsResponse")]
        System.IAsyncResult BeginSubmitStats(string version, string serverKey, string hardwareKey, string statXml, System.AsyncCallback callback, object asyncState);
        
        bool EndSubmitStats(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MediaInventory", ReplyAction="http://tempuri.org/IService/MediaInventoryResponse")]
        bool MediaInventory(string version, string serverKey, string hardwareKey, string mediaInventory1);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/MediaInventory", ReplyAction="http://tempuri.org/IService/MediaInventoryResponse")]
        System.IAsyncResult BeginMediaInventory(string version, string serverKey, string hardwareKey, string mediaInventory1, System.AsyncCallback callback, object asyncState);
        
        bool EndMediaInventory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetResource", ReplyAction="http://tempuri.org/IService/GetResourceResponse")]
        string GetResource(string serverKey, string hardwareKey, int layoutId, string regionId, string mediaId, string version);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetResource", ReplyAction="http://tempuri.org/IService/GetResourceResponse")]
        System.IAsyncResult BeginGetResource(string serverKey, string hardwareKey, int layoutId, string regionId, string mediaId, string version, System.AsyncCallback callback, object asyncState);
        
        string EndGetResource(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileDownloadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileDownloadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public eAd.DataAccess.FileMetaData MetaData;
        
        public FileDownloadMessage() {
        }
        
        public FileDownloadMessage(eAd.DataAccess.FileMetaData MetaData) {
            this.MetaData = MetaData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileDownloadReturnMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileDownloadReturnMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public eAd.DataAccess.FileMetaData DownloadedFileMetadata;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public FileDownloadReturnMessage() {
        }
        
        public FileDownloadReturnMessage(eAd.DataAccess.FileMetaData DownloadedFileMetadata, System.IO.Stream FileByteStream) {
            this.DownloadedFileMetadata = DownloadedFileMetadata;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : eAd.Website.eAdDataService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream FileByteStream {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
        
        public eAd.DataAccess.FileMetaData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataAccess.FileMetaData)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SayHiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SayHiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SayHiKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SayHiKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyMediaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyMediaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.MediaListModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.MediaListModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMediaDurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMediaDurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.TimeSpan Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.TimeSpan)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoIHaveUpdatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoIHaveUpdatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoIHaveUpdatesKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoIHaveUpdatesKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMosaicForStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMosaicForStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataAccess.Mosaic Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataAccess.Mosaic)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMosaicForStationKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMosaicForStationKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataAccess.Mosaic Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataAccess.Mosaic)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MakeStationUnAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MakeStationUnAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMediaLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMediaLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMosaicIDForStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMosaicIDForStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMosaicIDForStationKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMosaicIDForStationKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPositionsForMosaicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPositionsForMosaicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.PositionViewModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.PositionViewModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MakeStationAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MakeStationAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MessageReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CaptureScreenShotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CaptureScreenShotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCustomerByRFIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCustomerByRFIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.CustomerViewModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.CustomerViewModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMessageToStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendMessageToStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMessageToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendMessageToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMyMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMyMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.MessageViewModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.MessageViewModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMyMessagesKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMyMessagesKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.MessageViewModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.MessageViewModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.CustomerViewModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.CustomerViewModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllStationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllStationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.StationViewModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.StationViewModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOnlineStationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOnlineStationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.StationViewModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.StationViewModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterDisplayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterDisplayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequiredFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequiredFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.FilesModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.FilesModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public eAd.DataViewModels.ScheduleModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((eAd.DataViewModels.ScheduleModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecieveXmlLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecieveXmlLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubmitLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubmitLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubmitStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubmitStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediaInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MediaInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetResourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetResourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<eAd.Website.eAdDataService.IService>, eAd.Website.eAdDataService.IService {
        
        private BeginOperationDelegate onBeginGetHiDelegate;
        
        private EndOperationDelegate onEndGetHiDelegate;
        
        private System.Threading.SendOrPostCallback onGetHiCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileDelegate;
        
        private EndOperationDelegate onEndUploadFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadFileDelegate;
        
        private EndOperationDelegate onEndDownloadFileDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginSayHiDelegate;
        
        private EndOperationDelegate onEndSayHiDelegate;
        
        private System.Threading.SendOrPostCallback onSayHiCompletedDelegate;
        
        private BeginOperationDelegate onBeginSayHiKeyDelegate;
        
        private EndOperationDelegate onEndSayHiKeyDelegate;
        
        private System.Threading.SendOrPostCallback onSayHiKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyMediaDelegate;
        
        private EndOperationDelegate onEndGetMyMediaDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyMediaCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMediaDurationDelegate;
        
        private EndOperationDelegate onEndGetMediaDurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetMediaDurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetStationStatusDelegate;
        
        private EndOperationDelegate onEndSetStationStatusDelegate;
        
        private System.Threading.SendOrPostCallback onSetStationStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginDoIHaveUpdatesDelegate;
        
        private EndOperationDelegate onEndDoIHaveUpdatesDelegate;
        
        private System.Threading.SendOrPostCallback onDoIHaveUpdatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDoIHaveUpdatesKeyDelegate;
        
        private EndOperationDelegate onEndDoIHaveUpdatesKeyDelegate;
        
        private System.Threading.SendOrPostCallback onDoIHaveUpdatesKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMosaicForStationDelegate;
        
        private EndOperationDelegate onEndGetMosaicForStationDelegate;
        
        private System.Threading.SendOrPostCallback onGetMosaicForStationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMosaicForStationKeyDelegate;
        
        private EndOperationDelegate onEndGetMosaicForStationKeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetMosaicForStationKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeStationUnAvailableDelegate;
        
        private EndOperationDelegate onEndMakeStationUnAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onMakeStationUnAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMediaLocationDelegate;
        
        private EndOperationDelegate onEndGetMediaLocationDelegate;
        
        private System.Threading.SendOrPostCallback onGetMediaLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMosaicIDForStationDelegate;
        
        private EndOperationDelegate onEndGetMosaicIDForStationDelegate;
        
        private System.Threading.SendOrPostCallback onGetMosaicIDForStationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMosaicIDForStationKeyDelegate;
        
        private EndOperationDelegate onEndGetMosaicIDForStationKeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetMosaicIDForStationKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPositionsForMosaicDelegate;
        
        private EndOperationDelegate onEndGetPositionsForMosaicDelegate;
        
        private System.Threading.SendOrPostCallback onGetPositionsForMosaicCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeStationAvailableDelegate;
        
        private EndOperationDelegate onEndMakeStationAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onMakeStationAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessageReadDelegate;
        
        private EndOperationDelegate onEndMessageReadDelegate;
        
        private System.Threading.SendOrPostCallback onMessageReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginCaptureScreenShotDelegate;
        
        private EndOperationDelegate onEndCaptureScreenShotDelegate;
        
        private System.Threading.SendOrPostCallback onCaptureScreenShotCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCustomerByRFIDDelegate;
        
        private EndOperationDelegate onEndGetCustomerByRFIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetCustomerByRFIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageToStationDelegate;
        
        private EndOperationDelegate onEndSendMessageToStationDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageToStationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageToGroupDelegate;
        
        private EndOperationDelegate onEndSendMessageToGroupDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageToGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMyMessagesDelegate;
        
        private EndOperationDelegate onEndGetAllMyMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMyMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMyMessagesKeyDelegate;
        
        private EndOperationDelegate onEndGetAllMyMessagesKeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMyMessagesKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCustomersDelegate;
        
        private EndOperationDelegate onEndGetAllCustomersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCustomersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllStationsDelegate;
        
        private EndOperationDelegate onEndGetAllStationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllStationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOnlineStationsDelegate;
        
        private EndOperationDelegate onEndGetOnlineStationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetOnlineStationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDisplayDelegate;
        
        private EndOperationDelegate onEndRegisterDisplayDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterDisplayCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequiredFilesDelegate;
        
        private EndOperationDelegate onEndRequiredFilesDelegate;
        
        private System.Threading.SendOrPostCallback onRequiredFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileDelegate;
        
        private EndOperationDelegate onEndGetFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginScheduleDelegate;
        
        private EndOperationDelegate onEndScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecieveXmlLogDelegate;
        
        private EndOperationDelegate onEndRecieveXmlLogDelegate;
        
        private System.Threading.SendOrPostCallback onRecieveXmlLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginBlackListDelegate;
        
        private EndOperationDelegate onEndBlackListDelegate;
        
        private System.Threading.SendOrPostCallback onBlackListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubmitLogDelegate;
        
        private EndOperationDelegate onEndSubmitLogDelegate;
        
        private System.Threading.SendOrPostCallback onSubmitLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubmitStatsDelegate;
        
        private EndOperationDelegate onEndSubmitStatsDelegate;
        
        private System.Threading.SendOrPostCallback onSubmitStatsCompletedDelegate;
        
        private BeginOperationDelegate onBeginMediaInventoryDelegate;
        
        private EndOperationDelegate onEndMediaInventoryDelegate;
        
        private System.Threading.SendOrPostCallback onMediaInventoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetResourceDelegate;
        
        private EndOperationDelegate onEndGetResourceDelegate;
        
        private System.Threading.SendOrPostCallback onGetResourceCompletedDelegate;
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetHiCompletedEventArgs> GetHiCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadFileCompleted;
        
        public event System.EventHandler<DownloadFileCompletedEventArgs> DownloadFileCompleted;
        
        public event System.EventHandler<SayHiCompletedEventArgs> SayHiCompleted;
        
        public event System.EventHandler<SayHiKeyCompletedEventArgs> SayHiKeyCompleted;
        
        public event System.EventHandler<GetMyMediaCompletedEventArgs> GetMyMediaCompleted;
        
        public event System.EventHandler<GetMediaDurationCompletedEventArgs> GetMediaDurationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetStationStatusCompleted;
        
        public event System.EventHandler<DoIHaveUpdatesCompletedEventArgs> DoIHaveUpdatesCompleted;
        
        public event System.EventHandler<DoIHaveUpdatesKeyCompletedEventArgs> DoIHaveUpdatesKeyCompleted;
        
        public event System.EventHandler<GetMosaicForStationCompletedEventArgs> GetMosaicForStationCompleted;
        
        public event System.EventHandler<GetMosaicForStationKeyCompletedEventArgs> GetMosaicForStationKeyCompleted;
        
        public event System.EventHandler<MakeStationUnAvailableCompletedEventArgs> MakeStationUnAvailableCompleted;
        
        public event System.EventHandler<GetMediaLocationCompletedEventArgs> GetMediaLocationCompleted;
        
        public event System.EventHandler<GetMosaicIDForStationCompletedEventArgs> GetMosaicIDForStationCompleted;
        
        public event System.EventHandler<GetMosaicIDForStationKeyCompletedEventArgs> GetMosaicIDForStationKeyCompleted;
        
        public event System.EventHandler<GetPositionsForMosaicCompletedEventArgs> GetPositionsForMosaicCompleted;
        
        public event System.EventHandler<MakeStationAvailableCompletedEventArgs> MakeStationAvailableCompleted;
        
        public event System.EventHandler<MessageReadCompletedEventArgs> MessageReadCompleted;
        
        public event System.EventHandler<CaptureScreenShotCompletedEventArgs> CaptureScreenShotCompleted;
        
        public event System.EventHandler<GetCustomerByRFIDCompletedEventArgs> GetCustomerByRFIDCompleted;
        
        public event System.EventHandler<SendMessageToStationCompletedEventArgs> SendMessageToStationCompleted;
        
        public event System.EventHandler<SendMessageToGroupCompletedEventArgs> SendMessageToGroupCompleted;
        
        public event System.EventHandler<GetAllMyMessagesCompletedEventArgs> GetAllMyMessagesCompleted;
        
        public event System.EventHandler<GetAllMyMessagesKeyCompletedEventArgs> GetAllMyMessagesKeyCompleted;
        
        public event System.EventHandler<GetAllCustomersCompletedEventArgs> GetAllCustomersCompleted;
        
        public event System.EventHandler<GetAllStationsCompletedEventArgs> GetAllStationsCompleted;
        
        public event System.EventHandler<GetOnlineStationsCompletedEventArgs> GetOnlineStationsCompleted;
        
        public event System.EventHandler<RegisterDisplayCompletedEventArgs> RegisterDisplayCompleted;
        
        public event System.EventHandler<RequiredFilesCompletedEventArgs> RequiredFilesCompleted;
        
        public event System.EventHandler<GetFileCompletedEventArgs> GetFileCompleted;
        
        public event System.EventHandler<ScheduleCompletedEventArgs> ScheduleCompleted;
        
        public event System.EventHandler<RecieveXmlLogCompletedEventArgs> RecieveXmlLogCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BlackListCompleted;
        
        public event System.EventHandler<SubmitLogCompletedEventArgs> SubmitLogCompleted;
        
        public event System.EventHandler<SubmitStatsCompletedEventArgs> SubmitStatsCompleted;
        
        public event System.EventHandler<MediaInventoryCompletedEventArgs> MediaInventoryCompleted;
        
        public event System.EventHandler<GetResourceCompletedEventArgs> GetResourceCompleted;
        
        public string GetHi() {
            return base.Channel.GetHi();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetHi(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHi(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetHi(System.IAsyncResult result) {
            return base.Channel.EndGetHi(result);
        }
        
        private System.IAsyncResult OnBeginGetHi(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetHi(callback, asyncState);
        }
        
        private object[] OnEndGetHi(System.IAsyncResult result) {
            string retVal = this.EndGetHi(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHiCompleted(object state) {
            if ((this.GetHiCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHiCompleted(this, new GetHiCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHiAsync() {
            this.GetHiAsync(null);
        }
        
        public void GetHiAsync(object userState) {
            if ((this.onBeginGetHiDelegate == null)) {
                this.onBeginGetHiDelegate = new BeginOperationDelegate(this.OnBeginGetHi);
            }
            if ((this.onEndGetHiDelegate == null)) {
                this.onEndGetHiDelegate = new EndOperationDelegate(this.OnEndGetHi);
            }
            if ((this.onGetHiCompletedDelegate == null)) {
                this.onGetHiCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHiCompleted);
            }
            base.InvokeAsync(this.onBeginGetHiDelegate, null, this.onEndGetHiDelegate, this.onGetHiCompletedDelegate, userState);
        }
        
        public void UploadFile(eAd.DataAccess.FileMetaData MetaData, System.IO.FileStream stream) {
            base.Channel.UploadFile(MetaData, stream);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadFile(eAd.DataAccess.FileMetaData MetaData, System.IO.FileStream stream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFile(MetaData, stream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUploadFile(System.IAsyncResult result) {
            base.Channel.EndUploadFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            eAd.DataAccess.FileMetaData MetaData = ((eAd.DataAccess.FileMetaData)(inValues[0]));
            System.IO.FileStream stream = ((System.IO.FileStream)(inValues[1]));
            return this.BeginUploadFile(MetaData, stream, callback, asyncState);
        }
        
        private object[] OnEndUploadFile(System.IAsyncResult result) {
            this.EndUploadFile(result);
            return null;
        }
        
        private void OnUploadFileCompleted(object state) {
            if ((this.UploadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileAsync(eAd.DataAccess.FileMetaData MetaData, System.IO.FileStream stream) {
            this.UploadFileAsync(MetaData, stream, null);
        }
        
        public void UploadFileAsync(eAd.DataAccess.FileMetaData MetaData, System.IO.FileStream stream, object userState) {
            if ((this.onBeginUploadFileDelegate == null)) {
                this.onBeginUploadFileDelegate = new BeginOperationDelegate(this.OnBeginUploadFile);
            }
            if ((this.onEndUploadFileDelegate == null)) {
                this.onEndUploadFileDelegate = new EndOperationDelegate(this.OnEndUploadFile);
            }
            if ((this.onUploadFileCompletedDelegate == null)) {
                this.onUploadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileDelegate, new object[] {
                        MetaData,
                        stream}, this.onEndUploadFileDelegate, this.onUploadFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        eAd.Website.eAdDataService.FileDownloadReturnMessage eAd.Website.eAdDataService.IService.DownloadFile(eAd.Website.eAdDataService.FileDownloadMessage request) {
            return base.Channel.DownloadFile(request);
        }
        
        public eAd.DataAccess.FileMetaData DownloadFile(eAd.DataAccess.FileMetaData MetaData, out System.IO.Stream FileByteStream) {
            eAd.Website.eAdDataService.FileDownloadMessage inValue = new eAd.Website.eAdDataService.FileDownloadMessage();
            inValue.MetaData = MetaData;
            eAd.Website.eAdDataService.FileDownloadReturnMessage retVal = ((eAd.Website.eAdDataService.IService)(this)).DownloadFile(inValue);
            FileByteStream = retVal.FileByteStream;
            return retVal.DownloadedFileMetadata;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eAd.Website.eAdDataService.IService.BeginDownloadFile(eAd.Website.eAdDataService.FileDownloadMessage request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadFile(eAd.DataAccess.FileMetaData MetaData, System.AsyncCallback callback, object asyncState) {
            eAd.Website.eAdDataService.FileDownloadMessage inValue = new eAd.Website.eAdDataService.FileDownloadMessage();
            inValue.MetaData = MetaData;
            return ((eAd.Website.eAdDataService.IService)(this)).BeginDownloadFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        eAd.Website.eAdDataService.FileDownloadReturnMessage eAd.Website.eAdDataService.IService.EndDownloadFile(System.IAsyncResult result) {
            return base.Channel.EndDownloadFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataAccess.FileMetaData EndDownloadFile(System.IAsyncResult result, out System.IO.Stream FileByteStream) {
            eAd.Website.eAdDataService.FileDownloadReturnMessage retVal = ((eAd.Website.eAdDataService.IService)(this)).EndDownloadFile(result);
            FileByteStream = retVal.FileByteStream;
            return retVal.DownloadedFileMetadata;
        }
        
        private System.IAsyncResult OnBeginDownloadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            eAd.DataAccess.FileMetaData MetaData = ((eAd.DataAccess.FileMetaData)(inValues[0]));
            return this.BeginDownloadFile(MetaData, callback, asyncState);
        }
        
        private object[] OnEndDownloadFile(System.IAsyncResult result) {
            System.IO.Stream FileByteStream = this.GetDefaultValueForInitialization<System.IO.Stream>();
            eAd.DataAccess.FileMetaData retVal = this.EndDownloadFile(result, out FileByteStream);
            return new object[] {
                    FileByteStream,
                    retVal};
        }
        
        private void OnDownloadFileCompleted(object state) {
            if ((this.DownloadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadFileAsync(eAd.DataAccess.FileMetaData MetaData) {
            this.DownloadFileAsync(MetaData, null);
        }
        
        public void DownloadFileAsync(eAd.DataAccess.FileMetaData MetaData, object userState) {
            if ((this.onBeginDownloadFileDelegate == null)) {
                this.onBeginDownloadFileDelegate = new BeginOperationDelegate(this.OnBeginDownloadFile);
            }
            if ((this.onEndDownloadFileDelegate == null)) {
                this.onEndDownloadFileDelegate = new EndOperationDelegate(this.OnEndDownloadFile);
            }
            if ((this.onDownloadFileCompletedDelegate == null)) {
                this.onDownloadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFileCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadFileDelegate, new object[] {
                        MetaData}, this.onEndDownloadFileDelegate, this.onDownloadFileCompletedDelegate, userState);
        }
        
        public string SayHi(long clientID) {
            return base.Channel.SayHi(clientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSayHi(long clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSayHi(clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSayHi(System.IAsyncResult result) {
            return base.Channel.EndSayHi(result);
        }
        
        private System.IAsyncResult OnBeginSayHi(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long clientID = ((long)(inValues[0]));
            return this.BeginSayHi(clientID, callback, asyncState);
        }
        
        private object[] OnEndSayHi(System.IAsyncResult result) {
            string retVal = this.EndSayHi(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSayHiCompleted(object state) {
            if ((this.SayHiCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SayHiCompleted(this, new SayHiCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SayHiAsync(long clientID) {
            this.SayHiAsync(clientID, null);
        }
        
        public void SayHiAsync(long clientID, object userState) {
            if ((this.onBeginSayHiDelegate == null)) {
                this.onBeginSayHiDelegate = new BeginOperationDelegate(this.OnBeginSayHi);
            }
            if ((this.onEndSayHiDelegate == null)) {
                this.onEndSayHiDelegate = new EndOperationDelegate(this.OnEndSayHi);
            }
            if ((this.onSayHiCompletedDelegate == null)) {
                this.onSayHiCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSayHiCompleted);
            }
            base.InvokeAsync(this.onBeginSayHiDelegate, new object[] {
                        clientID}, this.onEndSayHiDelegate, this.onSayHiCompletedDelegate, userState);
        }
        
        public string SayHiKey(string hardwareKey) {
            return base.Channel.SayHiKey(hardwareKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSayHiKey(string hardwareKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSayHiKey(hardwareKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSayHiKey(System.IAsyncResult result) {
            return base.Channel.EndSayHiKey(result);
        }
        
        private System.IAsyncResult OnBeginSayHiKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string hardwareKey = ((string)(inValues[0]));
            return this.BeginSayHiKey(hardwareKey, callback, asyncState);
        }
        
        private object[] OnEndSayHiKey(System.IAsyncResult result) {
            string retVal = this.EndSayHiKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSayHiKeyCompleted(object state) {
            if ((this.SayHiKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SayHiKeyCompleted(this, new SayHiKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SayHiKeyAsync(string hardwareKey) {
            this.SayHiKeyAsync(hardwareKey, null);
        }
        
        public void SayHiKeyAsync(string hardwareKey, object userState) {
            if ((this.onBeginSayHiKeyDelegate == null)) {
                this.onBeginSayHiKeyDelegate = new BeginOperationDelegate(this.OnBeginSayHiKey);
            }
            if ((this.onEndSayHiKeyDelegate == null)) {
                this.onEndSayHiKeyDelegate = new EndOperationDelegate(this.OnEndSayHiKey);
            }
            if ((this.onSayHiKeyCompletedDelegate == null)) {
                this.onSayHiKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSayHiKeyCompleted);
            }
            base.InvokeAsync(this.onBeginSayHiKeyDelegate, new object[] {
                        hardwareKey}, this.onEndSayHiKeyDelegate, this.onSayHiKeyCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.MediaListModel[] GetMyMedia(long stationID) {
            return base.Channel.GetMyMedia(stationID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMyMedia(long stationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyMedia(stationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.MediaListModel[] EndGetMyMedia(System.IAsyncResult result) {
            return base.Channel.EndGetMyMedia(result);
        }
        
        private System.IAsyncResult OnBeginGetMyMedia(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long stationID = ((long)(inValues[0]));
            return this.BeginGetMyMedia(stationID, callback, asyncState);
        }
        
        private object[] OnEndGetMyMedia(System.IAsyncResult result) {
            eAd.DataViewModels.MediaListModel[] retVal = this.EndGetMyMedia(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyMediaCompleted(object state) {
            if ((this.GetMyMediaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyMediaCompleted(this, new GetMyMediaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyMediaAsync(long stationID) {
            this.GetMyMediaAsync(stationID, null);
        }
        
        public void GetMyMediaAsync(long stationID, object userState) {
            if ((this.onBeginGetMyMediaDelegate == null)) {
                this.onBeginGetMyMediaDelegate = new BeginOperationDelegate(this.OnBeginGetMyMedia);
            }
            if ((this.onEndGetMyMediaDelegate == null)) {
                this.onEndGetMyMediaDelegate = new EndOperationDelegate(this.OnEndGetMyMedia);
            }
            if ((this.onGetMyMediaCompletedDelegate == null)) {
                this.onGetMyMediaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyMediaCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyMediaDelegate, new object[] {
                        stationID}, this.onEndGetMyMediaDelegate, this.onGetMyMediaCompletedDelegate, userState);
        }
        
        public System.TimeSpan GetMediaDuration(long mediaID) {
            return base.Channel.GetMediaDuration(mediaID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMediaDuration(long mediaID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMediaDuration(mediaID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.TimeSpan EndGetMediaDuration(System.IAsyncResult result) {
            return base.Channel.EndGetMediaDuration(result);
        }
        
        private System.IAsyncResult OnBeginGetMediaDuration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long mediaID = ((long)(inValues[0]));
            return this.BeginGetMediaDuration(mediaID, callback, asyncState);
        }
        
        private object[] OnEndGetMediaDuration(System.IAsyncResult result) {
            System.TimeSpan retVal = this.EndGetMediaDuration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMediaDurationCompleted(object state) {
            if ((this.GetMediaDurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMediaDurationCompleted(this, new GetMediaDurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMediaDurationAsync(long mediaID) {
            this.GetMediaDurationAsync(mediaID, null);
        }
        
        public void GetMediaDurationAsync(long mediaID, object userState) {
            if ((this.onBeginGetMediaDurationDelegate == null)) {
                this.onBeginGetMediaDurationDelegate = new BeginOperationDelegate(this.OnBeginGetMediaDuration);
            }
            if ((this.onEndGetMediaDurationDelegate == null)) {
                this.onEndGetMediaDurationDelegate = new EndOperationDelegate(this.OnEndGetMediaDuration);
            }
            if ((this.onGetMediaDurationCompletedDelegate == null)) {
                this.onGetMediaDurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMediaDurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetMediaDurationDelegate, new object[] {
                        mediaID}, this.onEndGetMediaDurationDelegate, this.onGetMediaDurationCompletedDelegate, userState);
        }
        
        public void SetStationStatus(long stationID, string status) {
            base.Channel.SetStationStatus(stationID, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetStationStatus(long stationID, string status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetStationStatus(stationID, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetStationStatus(System.IAsyncResult result) {
            base.Channel.EndSetStationStatus(result);
        }
        
        private System.IAsyncResult OnBeginSetStationStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long stationID = ((long)(inValues[0]));
            string status = ((string)(inValues[1]));
            return this.BeginSetStationStatus(stationID, status, callback, asyncState);
        }
        
        private object[] OnEndSetStationStatus(System.IAsyncResult result) {
            this.EndSetStationStatus(result);
            return null;
        }
        
        private void OnSetStationStatusCompleted(object state) {
            if ((this.SetStationStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetStationStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetStationStatusAsync(long stationID, string status) {
            this.SetStationStatusAsync(stationID, status, null);
        }
        
        public void SetStationStatusAsync(long stationID, string status, object userState) {
            if ((this.onBeginSetStationStatusDelegate == null)) {
                this.onBeginSetStationStatusDelegate = new BeginOperationDelegate(this.OnBeginSetStationStatus);
            }
            if ((this.onEndSetStationStatusDelegate == null)) {
                this.onEndSetStationStatusDelegate = new EndOperationDelegate(this.OnEndSetStationStatus);
            }
            if ((this.onSetStationStatusCompletedDelegate == null)) {
                this.onSetStationStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetStationStatusCompleted);
            }
            base.InvokeAsync(this.onBeginSetStationStatusDelegate, new object[] {
                        stationID,
                        status}, this.onEndSetStationStatusDelegate, this.onSetStationStatusCompletedDelegate, userState);
        }
        
        public bool DoIHaveUpdates(long clientID) {
            return base.Channel.DoIHaveUpdates(clientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDoIHaveUpdates(long clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoIHaveUpdates(clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDoIHaveUpdates(System.IAsyncResult result) {
            return base.Channel.EndDoIHaveUpdates(result);
        }
        
        private System.IAsyncResult OnBeginDoIHaveUpdates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long clientID = ((long)(inValues[0]));
            return this.BeginDoIHaveUpdates(clientID, callback, asyncState);
        }
        
        private object[] OnEndDoIHaveUpdates(System.IAsyncResult result) {
            bool retVal = this.EndDoIHaveUpdates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoIHaveUpdatesCompleted(object state) {
            if ((this.DoIHaveUpdatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoIHaveUpdatesCompleted(this, new DoIHaveUpdatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoIHaveUpdatesAsync(long clientID) {
            this.DoIHaveUpdatesAsync(clientID, null);
        }
        
        public void DoIHaveUpdatesAsync(long clientID, object userState) {
            if ((this.onBeginDoIHaveUpdatesDelegate == null)) {
                this.onBeginDoIHaveUpdatesDelegate = new BeginOperationDelegate(this.OnBeginDoIHaveUpdates);
            }
            if ((this.onEndDoIHaveUpdatesDelegate == null)) {
                this.onEndDoIHaveUpdatesDelegate = new EndOperationDelegate(this.OnEndDoIHaveUpdates);
            }
            if ((this.onDoIHaveUpdatesCompletedDelegate == null)) {
                this.onDoIHaveUpdatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoIHaveUpdatesCompleted);
            }
            base.InvokeAsync(this.onBeginDoIHaveUpdatesDelegate, new object[] {
                        clientID}, this.onEndDoIHaveUpdatesDelegate, this.onDoIHaveUpdatesCompletedDelegate, userState);
        }
        
        public bool DoIHaveUpdatesKey(string hardwareKey) {
            return base.Channel.DoIHaveUpdatesKey(hardwareKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDoIHaveUpdatesKey(string hardwareKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoIHaveUpdatesKey(hardwareKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDoIHaveUpdatesKey(System.IAsyncResult result) {
            return base.Channel.EndDoIHaveUpdatesKey(result);
        }
        
        private System.IAsyncResult OnBeginDoIHaveUpdatesKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string hardwareKey = ((string)(inValues[0]));
            return this.BeginDoIHaveUpdatesKey(hardwareKey, callback, asyncState);
        }
        
        private object[] OnEndDoIHaveUpdatesKey(System.IAsyncResult result) {
            bool retVal = this.EndDoIHaveUpdatesKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoIHaveUpdatesKeyCompleted(object state) {
            if ((this.DoIHaveUpdatesKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoIHaveUpdatesKeyCompleted(this, new DoIHaveUpdatesKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoIHaveUpdatesKeyAsync(string hardwareKey) {
            this.DoIHaveUpdatesKeyAsync(hardwareKey, null);
        }
        
        public void DoIHaveUpdatesKeyAsync(string hardwareKey, object userState) {
            if ((this.onBeginDoIHaveUpdatesKeyDelegate == null)) {
                this.onBeginDoIHaveUpdatesKeyDelegate = new BeginOperationDelegate(this.OnBeginDoIHaveUpdatesKey);
            }
            if ((this.onEndDoIHaveUpdatesKeyDelegate == null)) {
                this.onEndDoIHaveUpdatesKeyDelegate = new EndOperationDelegate(this.OnEndDoIHaveUpdatesKey);
            }
            if ((this.onDoIHaveUpdatesKeyCompletedDelegate == null)) {
                this.onDoIHaveUpdatesKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoIHaveUpdatesKeyCompleted);
            }
            base.InvokeAsync(this.onBeginDoIHaveUpdatesKeyDelegate, new object[] {
                        hardwareKey}, this.onEndDoIHaveUpdatesKeyDelegate, this.onDoIHaveUpdatesKeyCompletedDelegate, userState);
        }
        
        public eAd.DataAccess.Mosaic GetMosaicForStation(long clientID) {
            return base.Channel.GetMosaicForStation(clientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMosaicForStation(long clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMosaicForStation(clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataAccess.Mosaic EndGetMosaicForStation(System.IAsyncResult result) {
            return base.Channel.EndGetMosaicForStation(result);
        }
        
        private System.IAsyncResult OnBeginGetMosaicForStation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long clientID = ((long)(inValues[0]));
            return this.BeginGetMosaicForStation(clientID, callback, asyncState);
        }
        
        private object[] OnEndGetMosaicForStation(System.IAsyncResult result) {
            eAd.DataAccess.Mosaic retVal = this.EndGetMosaicForStation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMosaicForStationCompleted(object state) {
            if ((this.GetMosaicForStationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMosaicForStationCompleted(this, new GetMosaicForStationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMosaicForStationAsync(long clientID) {
            this.GetMosaicForStationAsync(clientID, null);
        }
        
        public void GetMosaicForStationAsync(long clientID, object userState) {
            if ((this.onBeginGetMosaicForStationDelegate == null)) {
                this.onBeginGetMosaicForStationDelegate = new BeginOperationDelegate(this.OnBeginGetMosaicForStation);
            }
            if ((this.onEndGetMosaicForStationDelegate == null)) {
                this.onEndGetMosaicForStationDelegate = new EndOperationDelegate(this.OnEndGetMosaicForStation);
            }
            if ((this.onGetMosaicForStationCompletedDelegate == null)) {
                this.onGetMosaicForStationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMosaicForStationCompleted);
            }
            base.InvokeAsync(this.onBeginGetMosaicForStationDelegate, new object[] {
                        clientID}, this.onEndGetMosaicForStationDelegate, this.onGetMosaicForStationCompletedDelegate, userState);
        }
        
        public eAd.DataAccess.Mosaic GetMosaicForStationKey(string hardwareKey) {
            return base.Channel.GetMosaicForStationKey(hardwareKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMosaicForStationKey(string hardwareKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMosaicForStationKey(hardwareKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataAccess.Mosaic EndGetMosaicForStationKey(System.IAsyncResult result) {
            return base.Channel.EndGetMosaicForStationKey(result);
        }
        
        private System.IAsyncResult OnBeginGetMosaicForStationKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string hardwareKey = ((string)(inValues[0]));
            return this.BeginGetMosaicForStationKey(hardwareKey, callback, asyncState);
        }
        
        private object[] OnEndGetMosaicForStationKey(System.IAsyncResult result) {
            eAd.DataAccess.Mosaic retVal = this.EndGetMosaicForStationKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMosaicForStationKeyCompleted(object state) {
            if ((this.GetMosaicForStationKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMosaicForStationKeyCompleted(this, new GetMosaicForStationKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMosaicForStationKeyAsync(string hardwareKey) {
            this.GetMosaicForStationKeyAsync(hardwareKey, null);
        }
        
        public void GetMosaicForStationKeyAsync(string hardwareKey, object userState) {
            if ((this.onBeginGetMosaicForStationKeyDelegate == null)) {
                this.onBeginGetMosaicForStationKeyDelegate = new BeginOperationDelegate(this.OnBeginGetMosaicForStationKey);
            }
            if ((this.onEndGetMosaicForStationKeyDelegate == null)) {
                this.onEndGetMosaicForStationKeyDelegate = new EndOperationDelegate(this.OnEndGetMosaicForStationKey);
            }
            if ((this.onGetMosaicForStationKeyCompletedDelegate == null)) {
                this.onGetMosaicForStationKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMosaicForStationKeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetMosaicForStationKeyDelegate, new object[] {
                        hardwareKey}, this.onEndGetMosaicForStationKeyDelegate, this.onGetMosaicForStationKeyCompletedDelegate, userState);
        }
        
        public bool MakeStationUnAvailable(long stationID, string rfidCode) {
            return base.Channel.MakeStationUnAvailable(stationID, rfidCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMakeStationUnAvailable(long stationID, string rfidCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeStationUnAvailable(stationID, rfidCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndMakeStationUnAvailable(System.IAsyncResult result) {
            return base.Channel.EndMakeStationUnAvailable(result);
        }
        
        private System.IAsyncResult OnBeginMakeStationUnAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long stationID = ((long)(inValues[0]));
            string rfidCode = ((string)(inValues[1]));
            return this.BeginMakeStationUnAvailable(stationID, rfidCode, callback, asyncState);
        }
        
        private object[] OnEndMakeStationUnAvailable(System.IAsyncResult result) {
            bool retVal = this.EndMakeStationUnAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMakeStationUnAvailableCompleted(object state) {
            if ((this.MakeStationUnAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeStationUnAvailableCompleted(this, new MakeStationUnAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeStationUnAvailableAsync(long stationID, string rfidCode) {
            this.MakeStationUnAvailableAsync(stationID, rfidCode, null);
        }
        
        public void MakeStationUnAvailableAsync(long stationID, string rfidCode, object userState) {
            if ((this.onBeginMakeStationUnAvailableDelegate == null)) {
                this.onBeginMakeStationUnAvailableDelegate = new BeginOperationDelegate(this.OnBeginMakeStationUnAvailable);
            }
            if ((this.onEndMakeStationUnAvailableDelegate == null)) {
                this.onEndMakeStationUnAvailableDelegate = new EndOperationDelegate(this.OnEndMakeStationUnAvailable);
            }
            if ((this.onMakeStationUnAvailableCompletedDelegate == null)) {
                this.onMakeStationUnAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeStationUnAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginMakeStationUnAvailableDelegate, new object[] {
                        stationID,
                        rfidCode}, this.onEndMakeStationUnAvailableDelegate, this.onMakeStationUnAvailableCompletedDelegate, userState);
        }
        
        public string GetMediaLocation(long mediaID) {
            return base.Channel.GetMediaLocation(mediaID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMediaLocation(long mediaID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMediaLocation(mediaID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMediaLocation(System.IAsyncResult result) {
            return base.Channel.EndGetMediaLocation(result);
        }
        
        private System.IAsyncResult OnBeginGetMediaLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long mediaID = ((long)(inValues[0]));
            return this.BeginGetMediaLocation(mediaID, callback, asyncState);
        }
        
        private object[] OnEndGetMediaLocation(System.IAsyncResult result) {
            string retVal = this.EndGetMediaLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMediaLocationCompleted(object state) {
            if ((this.GetMediaLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMediaLocationCompleted(this, new GetMediaLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMediaLocationAsync(long mediaID) {
            this.GetMediaLocationAsync(mediaID, null);
        }
        
        public void GetMediaLocationAsync(long mediaID, object userState) {
            if ((this.onBeginGetMediaLocationDelegate == null)) {
                this.onBeginGetMediaLocationDelegate = new BeginOperationDelegate(this.OnBeginGetMediaLocation);
            }
            if ((this.onEndGetMediaLocationDelegate == null)) {
                this.onEndGetMediaLocationDelegate = new EndOperationDelegate(this.OnEndGetMediaLocation);
            }
            if ((this.onGetMediaLocationCompletedDelegate == null)) {
                this.onGetMediaLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMediaLocationCompleted);
            }
            base.InvokeAsync(this.onBeginGetMediaLocationDelegate, new object[] {
                        mediaID}, this.onEndGetMediaLocationDelegate, this.onGetMediaLocationCompletedDelegate, userState);
        }
        
        public long GetMosaicIDForStation(long stationID) {
            return base.Channel.GetMosaicIDForStation(stationID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMosaicIDForStation(long stationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMosaicIDForStation(stationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndGetMosaicIDForStation(System.IAsyncResult result) {
            return base.Channel.EndGetMosaicIDForStation(result);
        }
        
        private System.IAsyncResult OnBeginGetMosaicIDForStation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long stationID = ((long)(inValues[0]));
            return this.BeginGetMosaicIDForStation(stationID, callback, asyncState);
        }
        
        private object[] OnEndGetMosaicIDForStation(System.IAsyncResult result) {
            long retVal = this.EndGetMosaicIDForStation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMosaicIDForStationCompleted(object state) {
            if ((this.GetMosaicIDForStationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMosaicIDForStationCompleted(this, new GetMosaicIDForStationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMosaicIDForStationAsync(long stationID) {
            this.GetMosaicIDForStationAsync(stationID, null);
        }
        
        public void GetMosaicIDForStationAsync(long stationID, object userState) {
            if ((this.onBeginGetMosaicIDForStationDelegate == null)) {
                this.onBeginGetMosaicIDForStationDelegate = new BeginOperationDelegate(this.OnBeginGetMosaicIDForStation);
            }
            if ((this.onEndGetMosaicIDForStationDelegate == null)) {
                this.onEndGetMosaicIDForStationDelegate = new EndOperationDelegate(this.OnEndGetMosaicIDForStation);
            }
            if ((this.onGetMosaicIDForStationCompletedDelegate == null)) {
                this.onGetMosaicIDForStationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMosaicIDForStationCompleted);
            }
            base.InvokeAsync(this.onBeginGetMosaicIDForStationDelegate, new object[] {
                        stationID}, this.onEndGetMosaicIDForStationDelegate, this.onGetMosaicIDForStationCompletedDelegate, userState);
        }
        
        public long GetMosaicIDForStationKey(string hardwareKey) {
            return base.Channel.GetMosaicIDForStationKey(hardwareKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMosaicIDForStationKey(string hardwareKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMosaicIDForStationKey(hardwareKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndGetMosaicIDForStationKey(System.IAsyncResult result) {
            return base.Channel.EndGetMosaicIDForStationKey(result);
        }
        
        private System.IAsyncResult OnBeginGetMosaicIDForStationKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string hardwareKey = ((string)(inValues[0]));
            return this.BeginGetMosaicIDForStationKey(hardwareKey, callback, asyncState);
        }
        
        private object[] OnEndGetMosaicIDForStationKey(System.IAsyncResult result) {
            long retVal = this.EndGetMosaicIDForStationKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMosaicIDForStationKeyCompleted(object state) {
            if ((this.GetMosaicIDForStationKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMosaicIDForStationKeyCompleted(this, new GetMosaicIDForStationKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMosaicIDForStationKeyAsync(string hardwareKey) {
            this.GetMosaicIDForStationKeyAsync(hardwareKey, null);
        }
        
        public void GetMosaicIDForStationKeyAsync(string hardwareKey, object userState) {
            if ((this.onBeginGetMosaicIDForStationKeyDelegate == null)) {
                this.onBeginGetMosaicIDForStationKeyDelegate = new BeginOperationDelegate(this.OnBeginGetMosaicIDForStationKey);
            }
            if ((this.onEndGetMosaicIDForStationKeyDelegate == null)) {
                this.onEndGetMosaicIDForStationKeyDelegate = new EndOperationDelegate(this.OnEndGetMosaicIDForStationKey);
            }
            if ((this.onGetMosaicIDForStationKeyCompletedDelegate == null)) {
                this.onGetMosaicIDForStationKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMosaicIDForStationKeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetMosaicIDForStationKeyDelegate, new object[] {
                        hardwareKey}, this.onEndGetMosaicIDForStationKeyDelegate, this.onGetMosaicIDForStationKeyCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.PositionViewModel[] GetPositionsForMosaic(long mosaicID) {
            return base.Channel.GetPositionsForMosaic(mosaicID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPositionsForMosaic(long mosaicID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPositionsForMosaic(mosaicID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.PositionViewModel[] EndGetPositionsForMosaic(System.IAsyncResult result) {
            return base.Channel.EndGetPositionsForMosaic(result);
        }
        
        private System.IAsyncResult OnBeginGetPositionsForMosaic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long mosaicID = ((long)(inValues[0]));
            return this.BeginGetPositionsForMosaic(mosaicID, callback, asyncState);
        }
        
        private object[] OnEndGetPositionsForMosaic(System.IAsyncResult result) {
            eAd.DataViewModels.PositionViewModel[] retVal = this.EndGetPositionsForMosaic(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPositionsForMosaicCompleted(object state) {
            if ((this.GetPositionsForMosaicCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPositionsForMosaicCompleted(this, new GetPositionsForMosaicCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPositionsForMosaicAsync(long mosaicID) {
            this.GetPositionsForMosaicAsync(mosaicID, null);
        }
        
        public void GetPositionsForMosaicAsync(long mosaicID, object userState) {
            if ((this.onBeginGetPositionsForMosaicDelegate == null)) {
                this.onBeginGetPositionsForMosaicDelegate = new BeginOperationDelegate(this.OnBeginGetPositionsForMosaic);
            }
            if ((this.onEndGetPositionsForMosaicDelegate == null)) {
                this.onEndGetPositionsForMosaicDelegate = new EndOperationDelegate(this.OnEndGetPositionsForMosaic);
            }
            if ((this.onGetPositionsForMosaicCompletedDelegate == null)) {
                this.onGetPositionsForMosaicCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPositionsForMosaicCompleted);
            }
            base.InvokeAsync(this.onBeginGetPositionsForMosaicDelegate, new object[] {
                        mosaicID}, this.onEndGetPositionsForMosaicDelegate, this.onGetPositionsForMosaicCompletedDelegate, userState);
        }
        
        public bool MakeStationAvailable(long stationID) {
            return base.Channel.MakeStationAvailable(stationID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMakeStationAvailable(long stationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeStationAvailable(stationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndMakeStationAvailable(System.IAsyncResult result) {
            return base.Channel.EndMakeStationAvailable(result);
        }
        
        private System.IAsyncResult OnBeginMakeStationAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long stationID = ((long)(inValues[0]));
            return this.BeginMakeStationAvailable(stationID, callback, asyncState);
        }
        
        private object[] OnEndMakeStationAvailable(System.IAsyncResult result) {
            bool retVal = this.EndMakeStationAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMakeStationAvailableCompleted(object state) {
            if ((this.MakeStationAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeStationAvailableCompleted(this, new MakeStationAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeStationAvailableAsync(long stationID) {
            this.MakeStationAvailableAsync(stationID, null);
        }
        
        public void MakeStationAvailableAsync(long stationID, object userState) {
            if ((this.onBeginMakeStationAvailableDelegate == null)) {
                this.onBeginMakeStationAvailableDelegate = new BeginOperationDelegate(this.OnBeginMakeStationAvailable);
            }
            if ((this.onEndMakeStationAvailableDelegate == null)) {
                this.onEndMakeStationAvailableDelegate = new EndOperationDelegate(this.OnEndMakeStationAvailable);
            }
            if ((this.onMakeStationAvailableCompletedDelegate == null)) {
                this.onMakeStationAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeStationAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginMakeStationAvailableDelegate, new object[] {
                        stationID}, this.onEndMakeStationAvailableDelegate, this.onMakeStationAvailableCompletedDelegate, userState);
        }
        
        public bool MessageRead(long messageID) {
            return base.Channel.MessageRead(messageID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMessageRead(long messageID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessageRead(messageID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndMessageRead(System.IAsyncResult result) {
            return base.Channel.EndMessageRead(result);
        }
        
        private System.IAsyncResult OnBeginMessageRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long messageID = ((long)(inValues[0]));
            return this.BeginMessageRead(messageID, callback, asyncState);
        }
        
        private object[] OnEndMessageRead(System.IAsyncResult result) {
            bool retVal = this.EndMessageRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessageReadCompleted(object state) {
            if ((this.MessageReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MessageReadCompleted(this, new MessageReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MessageReadAsync(long messageID) {
            this.MessageReadAsync(messageID, null);
        }
        
        public void MessageReadAsync(long messageID, object userState) {
            if ((this.onBeginMessageReadDelegate == null)) {
                this.onBeginMessageReadDelegate = new BeginOperationDelegate(this.OnBeginMessageRead);
            }
            if ((this.onEndMessageReadDelegate == null)) {
                this.onEndMessageReadDelegate = new EndOperationDelegate(this.OnEndMessageRead);
            }
            if ((this.onMessageReadCompletedDelegate == null)) {
                this.onMessageReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessageReadCompleted);
            }
            base.InvokeAsync(this.onBeginMessageReadDelegate, new object[] {
                        messageID}, this.onEndMessageReadDelegate, this.onMessageReadCompletedDelegate, userState);
        }
        
        public bool CaptureScreenShot(long stationID) {
            return base.Channel.CaptureScreenShot(stationID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCaptureScreenShot(long stationID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCaptureScreenShot(stationID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCaptureScreenShot(System.IAsyncResult result) {
            return base.Channel.EndCaptureScreenShot(result);
        }
        
        private System.IAsyncResult OnBeginCaptureScreenShot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long stationID = ((long)(inValues[0]));
            return this.BeginCaptureScreenShot(stationID, callback, asyncState);
        }
        
        private object[] OnEndCaptureScreenShot(System.IAsyncResult result) {
            bool retVal = this.EndCaptureScreenShot(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCaptureScreenShotCompleted(object state) {
            if ((this.CaptureScreenShotCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CaptureScreenShotCompleted(this, new CaptureScreenShotCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CaptureScreenShotAsync(long stationID) {
            this.CaptureScreenShotAsync(stationID, null);
        }
        
        public void CaptureScreenShotAsync(long stationID, object userState) {
            if ((this.onBeginCaptureScreenShotDelegate == null)) {
                this.onBeginCaptureScreenShotDelegate = new BeginOperationDelegate(this.OnBeginCaptureScreenShot);
            }
            if ((this.onEndCaptureScreenShotDelegate == null)) {
                this.onEndCaptureScreenShotDelegate = new EndOperationDelegate(this.OnEndCaptureScreenShot);
            }
            if ((this.onCaptureScreenShotCompletedDelegate == null)) {
                this.onCaptureScreenShotCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCaptureScreenShotCompleted);
            }
            base.InvokeAsync(this.onBeginCaptureScreenShotDelegate, new object[] {
                        stationID}, this.onEndCaptureScreenShotDelegate, this.onCaptureScreenShotCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.CustomerViewModel GetCustomerByRFID(string tag) {
            return base.Channel.GetCustomerByRFID(tag);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCustomerByRFID(string tag, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCustomerByRFID(tag, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.CustomerViewModel EndGetCustomerByRFID(System.IAsyncResult result) {
            return base.Channel.EndGetCustomerByRFID(result);
        }
        
        private System.IAsyncResult OnBeginGetCustomerByRFID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tag = ((string)(inValues[0]));
            return this.BeginGetCustomerByRFID(tag, callback, asyncState);
        }
        
        private object[] OnEndGetCustomerByRFID(System.IAsyncResult result) {
            eAd.DataViewModels.CustomerViewModel retVal = this.EndGetCustomerByRFID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCustomerByRFIDCompleted(object state) {
            if ((this.GetCustomerByRFIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCustomerByRFIDCompleted(this, new GetCustomerByRFIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCustomerByRFIDAsync(string tag) {
            this.GetCustomerByRFIDAsync(tag, null);
        }
        
        public void GetCustomerByRFIDAsync(string tag, object userState) {
            if ((this.onBeginGetCustomerByRFIDDelegate == null)) {
                this.onBeginGetCustomerByRFIDDelegate = new BeginOperationDelegate(this.OnBeginGetCustomerByRFID);
            }
            if ((this.onEndGetCustomerByRFIDDelegate == null)) {
                this.onEndGetCustomerByRFIDDelegate = new EndOperationDelegate(this.OnEndGetCustomerByRFID);
            }
            if ((this.onGetCustomerByRFIDCompletedDelegate == null)) {
                this.onGetCustomerByRFIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCustomerByRFIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetCustomerByRFIDDelegate, new object[] {
                        tag}, this.onEndGetCustomerByRFIDDelegate, this.onGetCustomerByRFIDCompletedDelegate, userState);
        }
        
        public bool SendMessageToStation(long stationID, eAd.DataViewModels.MessageViewModel message) {
            return base.Channel.SendMessageToStation(stationID, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMessageToStation(long stationID, eAd.DataViewModels.MessageViewModel message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessageToStation(stationID, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSendMessageToStation(System.IAsyncResult result) {
            return base.Channel.EndSendMessageToStation(result);
        }
        
        private System.IAsyncResult OnBeginSendMessageToStation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long stationID = ((long)(inValues[0]));
            eAd.DataViewModels.MessageViewModel message = ((eAd.DataViewModels.MessageViewModel)(inValues[1]));
            return this.BeginSendMessageToStation(stationID, message, callback, asyncState);
        }
        
        private object[] OnEndSendMessageToStation(System.IAsyncResult result) {
            bool retVal = this.EndSendMessageToStation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendMessageToStationCompleted(object state) {
            if ((this.SendMessageToStationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageToStationCompleted(this, new SendMessageToStationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageToStationAsync(long stationID, eAd.DataViewModels.MessageViewModel message) {
            this.SendMessageToStationAsync(stationID, message, null);
        }
        
        public void SendMessageToStationAsync(long stationID, eAd.DataViewModels.MessageViewModel message, object userState) {
            if ((this.onBeginSendMessageToStationDelegate == null)) {
                this.onBeginSendMessageToStationDelegate = new BeginOperationDelegate(this.OnBeginSendMessageToStation);
            }
            if ((this.onEndSendMessageToStationDelegate == null)) {
                this.onEndSendMessageToStationDelegate = new EndOperationDelegate(this.OnEndSendMessageToStation);
            }
            if ((this.onSendMessageToStationCompletedDelegate == null)) {
                this.onSendMessageToStationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageToStationCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageToStationDelegate, new object[] {
                        stationID,
                        message}, this.onEndSendMessageToStationDelegate, this.onSendMessageToStationCompletedDelegate, userState);
        }
        
        public bool SendMessageToGroup(long groupID, eAd.DataViewModels.MessageViewModel message) {
            return base.Channel.SendMessageToGroup(groupID, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMessageToGroup(long groupID, eAd.DataViewModels.MessageViewModel message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessageToGroup(groupID, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSendMessageToGroup(System.IAsyncResult result) {
            return base.Channel.EndSendMessageToGroup(result);
        }
        
        private System.IAsyncResult OnBeginSendMessageToGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long groupID = ((long)(inValues[0]));
            eAd.DataViewModels.MessageViewModel message = ((eAd.DataViewModels.MessageViewModel)(inValues[1]));
            return this.BeginSendMessageToGroup(groupID, message, callback, asyncState);
        }
        
        private object[] OnEndSendMessageToGroup(System.IAsyncResult result) {
            bool retVal = this.EndSendMessageToGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendMessageToGroupCompleted(object state) {
            if ((this.SendMessageToGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageToGroupCompleted(this, new SendMessageToGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageToGroupAsync(long groupID, eAd.DataViewModels.MessageViewModel message) {
            this.SendMessageToGroupAsync(groupID, message, null);
        }
        
        public void SendMessageToGroupAsync(long groupID, eAd.DataViewModels.MessageViewModel message, object userState) {
            if ((this.onBeginSendMessageToGroupDelegate == null)) {
                this.onBeginSendMessageToGroupDelegate = new BeginOperationDelegate(this.OnBeginSendMessageToGroup);
            }
            if ((this.onEndSendMessageToGroupDelegate == null)) {
                this.onEndSendMessageToGroupDelegate = new EndOperationDelegate(this.OnEndSendMessageToGroup);
            }
            if ((this.onSendMessageToGroupCompletedDelegate == null)) {
                this.onSendMessageToGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageToGroupCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageToGroupDelegate, new object[] {
                        groupID,
                        message}, this.onEndSendMessageToGroupDelegate, this.onSendMessageToGroupCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.MessageViewModel[] GetAllMyMessages(long clientID) {
            return base.Channel.GetAllMyMessages(clientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMyMessages(long clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMyMessages(clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.MessageViewModel[] EndGetAllMyMessages(System.IAsyncResult result) {
            return base.Channel.EndGetAllMyMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMyMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long clientID = ((long)(inValues[0]));
            return this.BeginGetAllMyMessages(clientID, callback, asyncState);
        }
        
        private object[] OnEndGetAllMyMessages(System.IAsyncResult result) {
            eAd.DataViewModels.MessageViewModel[] retVal = this.EndGetAllMyMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMyMessagesCompleted(object state) {
            if ((this.GetAllMyMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMyMessagesCompleted(this, new GetAllMyMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMyMessagesAsync(long clientID) {
            this.GetAllMyMessagesAsync(clientID, null);
        }
        
        public void GetAllMyMessagesAsync(long clientID, object userState) {
            if ((this.onBeginGetAllMyMessagesDelegate == null)) {
                this.onBeginGetAllMyMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetAllMyMessages);
            }
            if ((this.onEndGetAllMyMessagesDelegate == null)) {
                this.onEndGetAllMyMessagesDelegate = new EndOperationDelegate(this.OnEndGetAllMyMessages);
            }
            if ((this.onGetAllMyMessagesCompletedDelegate == null)) {
                this.onGetAllMyMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMyMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMyMessagesDelegate, new object[] {
                        clientID}, this.onEndGetAllMyMessagesDelegate, this.onGetAllMyMessagesCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.MessageViewModel[] GetAllMyMessagesKey(string hardwareKey) {
            return base.Channel.GetAllMyMessagesKey(hardwareKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMyMessagesKey(string hardwareKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMyMessagesKey(hardwareKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.MessageViewModel[] EndGetAllMyMessagesKey(System.IAsyncResult result) {
            return base.Channel.EndGetAllMyMessagesKey(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMyMessagesKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string hardwareKey = ((string)(inValues[0]));
            return this.BeginGetAllMyMessagesKey(hardwareKey, callback, asyncState);
        }
        
        private object[] OnEndGetAllMyMessagesKey(System.IAsyncResult result) {
            eAd.DataViewModels.MessageViewModel[] retVal = this.EndGetAllMyMessagesKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMyMessagesKeyCompleted(object state) {
            if ((this.GetAllMyMessagesKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMyMessagesKeyCompleted(this, new GetAllMyMessagesKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMyMessagesKeyAsync(string hardwareKey) {
            this.GetAllMyMessagesKeyAsync(hardwareKey, null);
        }
        
        public void GetAllMyMessagesKeyAsync(string hardwareKey, object userState) {
            if ((this.onBeginGetAllMyMessagesKeyDelegate == null)) {
                this.onBeginGetAllMyMessagesKeyDelegate = new BeginOperationDelegate(this.OnBeginGetAllMyMessagesKey);
            }
            if ((this.onEndGetAllMyMessagesKeyDelegate == null)) {
                this.onEndGetAllMyMessagesKeyDelegate = new EndOperationDelegate(this.OnEndGetAllMyMessagesKey);
            }
            if ((this.onGetAllMyMessagesKeyCompletedDelegate == null)) {
                this.onGetAllMyMessagesKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMyMessagesKeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMyMessagesKeyDelegate, new object[] {
                        hardwareKey}, this.onEndGetAllMyMessagesKeyDelegate, this.onGetAllMyMessagesKeyCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.CustomerViewModel[] GetAllCustomers() {
            return base.Channel.GetAllCustomers();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllCustomers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCustomers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.CustomerViewModel[] EndGetAllCustomers(System.IAsyncResult result) {
            return base.Channel.EndGetAllCustomers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCustomers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllCustomers(callback, asyncState);
        }
        
        private object[] OnEndGetAllCustomers(System.IAsyncResult result) {
            eAd.DataViewModels.CustomerViewModel[] retVal = this.EndGetAllCustomers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCustomersCompleted(object state) {
            if ((this.GetAllCustomersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCustomersCompleted(this, new GetAllCustomersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCustomersAsync() {
            this.GetAllCustomersAsync(null);
        }
        
        public void GetAllCustomersAsync(object userState) {
            if ((this.onBeginGetAllCustomersDelegate == null)) {
                this.onBeginGetAllCustomersDelegate = new BeginOperationDelegate(this.OnBeginGetAllCustomers);
            }
            if ((this.onEndGetAllCustomersDelegate == null)) {
                this.onEndGetAllCustomersDelegate = new EndOperationDelegate(this.OnEndGetAllCustomers);
            }
            if ((this.onGetAllCustomersCompletedDelegate == null)) {
                this.onGetAllCustomersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCustomersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCustomersDelegate, null, this.onEndGetAllCustomersDelegate, this.onGetAllCustomersCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.StationViewModel[] GetAllStations() {
            return base.Channel.GetAllStations();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllStations(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllStations(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.StationViewModel[] EndGetAllStations(System.IAsyncResult result) {
            return base.Channel.EndGetAllStations(result);
        }
        
        private System.IAsyncResult OnBeginGetAllStations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllStations(callback, asyncState);
        }
        
        private object[] OnEndGetAllStations(System.IAsyncResult result) {
            eAd.DataViewModels.StationViewModel[] retVal = this.EndGetAllStations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllStationsCompleted(object state) {
            if ((this.GetAllStationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllStationsCompleted(this, new GetAllStationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllStationsAsync() {
            this.GetAllStationsAsync(null);
        }
        
        public void GetAllStationsAsync(object userState) {
            if ((this.onBeginGetAllStationsDelegate == null)) {
                this.onBeginGetAllStationsDelegate = new BeginOperationDelegate(this.OnBeginGetAllStations);
            }
            if ((this.onEndGetAllStationsDelegate == null)) {
                this.onEndGetAllStationsDelegate = new EndOperationDelegate(this.OnEndGetAllStations);
            }
            if ((this.onGetAllStationsCompletedDelegate == null)) {
                this.onGetAllStationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllStationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllStationsDelegate, null, this.onEndGetAllStationsDelegate, this.onGetAllStationsCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.StationViewModel[] GetOnlineStations() {
            return base.Channel.GetOnlineStations();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOnlineStations(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOnlineStations(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.StationViewModel[] EndGetOnlineStations(System.IAsyncResult result) {
            return base.Channel.EndGetOnlineStations(result);
        }
        
        private System.IAsyncResult OnBeginGetOnlineStations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetOnlineStations(callback, asyncState);
        }
        
        private object[] OnEndGetOnlineStations(System.IAsyncResult result) {
            eAd.DataViewModels.StationViewModel[] retVal = this.EndGetOnlineStations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOnlineStationsCompleted(object state) {
            if ((this.GetOnlineStationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOnlineStationsCompleted(this, new GetOnlineStationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOnlineStationsAsync() {
            this.GetOnlineStationsAsync(null);
        }
        
        public void GetOnlineStationsAsync(object userState) {
            if ((this.onBeginGetOnlineStationsDelegate == null)) {
                this.onBeginGetOnlineStationsDelegate = new BeginOperationDelegate(this.OnBeginGetOnlineStations);
            }
            if ((this.onEndGetOnlineStationsDelegate == null)) {
                this.onEndGetOnlineStationsDelegate = new EndOperationDelegate(this.OnEndGetOnlineStations);
            }
            if ((this.onGetOnlineStationsCompletedDelegate == null)) {
                this.onGetOnlineStationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOnlineStationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetOnlineStationsDelegate, null, this.onEndGetOnlineStationsDelegate, this.onGetOnlineStationsCompletedDelegate, userState);
        }
        
        public string RegisterDisplay(string serverKey, string hardwareKey, string displayName, string version) {
            return base.Channel.RegisterDisplay(serverKey, hardwareKey, displayName, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegisterDisplay(string serverKey, string hardwareKey, string displayName, string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterDisplay(serverKey, hardwareKey, displayName, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndRegisterDisplay(System.IAsyncResult result) {
            return base.Channel.EndRegisterDisplay(result);
        }
        
        private System.IAsyncResult OnBeginRegisterDisplay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverKey = ((string)(inValues[0]));
            string hardwareKey = ((string)(inValues[1]));
            string displayName = ((string)(inValues[2]));
            string version = ((string)(inValues[3]));
            return this.BeginRegisterDisplay(serverKey, hardwareKey, displayName, version, callback, asyncState);
        }
        
        private object[] OnEndRegisterDisplay(System.IAsyncResult result) {
            string retVal = this.EndRegisterDisplay(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterDisplayCompleted(object state) {
            if ((this.RegisterDisplayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterDisplayCompleted(this, new RegisterDisplayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterDisplayAsync(string serverKey, string hardwareKey, string displayName, string version) {
            this.RegisterDisplayAsync(serverKey, hardwareKey, displayName, version, null);
        }
        
        public void RegisterDisplayAsync(string serverKey, string hardwareKey, string displayName, string version, object userState) {
            if ((this.onBeginRegisterDisplayDelegate == null)) {
                this.onBeginRegisterDisplayDelegate = new BeginOperationDelegate(this.OnBeginRegisterDisplay);
            }
            if ((this.onEndRegisterDisplayDelegate == null)) {
                this.onEndRegisterDisplayDelegate = new EndOperationDelegate(this.OnEndRegisterDisplay);
            }
            if ((this.onRegisterDisplayCompletedDelegate == null)) {
                this.onRegisterDisplayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterDisplayCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDisplayDelegate, new object[] {
                        serverKey,
                        hardwareKey,
                        displayName,
                        version}, this.onEndRegisterDisplayDelegate, this.onRegisterDisplayCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.FilesModel RequiredFiles(string serverKey, string hardwareKey, string version) {
            return base.Channel.RequiredFiles(serverKey, hardwareKey, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequiredFiles(string serverKey, string hardwareKey, string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequiredFiles(serverKey, hardwareKey, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.FilesModel EndRequiredFiles(System.IAsyncResult result) {
            return base.Channel.EndRequiredFiles(result);
        }
        
        private System.IAsyncResult OnBeginRequiredFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverKey = ((string)(inValues[0]));
            string hardwareKey = ((string)(inValues[1]));
            string version = ((string)(inValues[2]));
            return this.BeginRequiredFiles(serverKey, hardwareKey, version, callback, asyncState);
        }
        
        private object[] OnEndRequiredFiles(System.IAsyncResult result) {
            eAd.DataViewModels.FilesModel retVal = this.EndRequiredFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequiredFilesCompleted(object state) {
            if ((this.RequiredFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequiredFilesCompleted(this, new RequiredFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequiredFilesAsync(string serverKey, string hardwareKey, string version) {
            this.RequiredFilesAsync(serverKey, hardwareKey, version, null);
        }
        
        public void RequiredFilesAsync(string serverKey, string hardwareKey, string version, object userState) {
            if ((this.onBeginRequiredFilesDelegate == null)) {
                this.onBeginRequiredFilesDelegate = new BeginOperationDelegate(this.OnBeginRequiredFiles);
            }
            if ((this.onEndRequiredFilesDelegate == null)) {
                this.onEndRequiredFilesDelegate = new EndOperationDelegate(this.OnEndRequiredFiles);
            }
            if ((this.onRequiredFilesCompletedDelegate == null)) {
                this.onRequiredFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequiredFilesCompleted);
            }
            base.InvokeAsync(this.onBeginRequiredFilesDelegate, new object[] {
                        serverKey,
                        hardwareKey,
                        version}, this.onEndRequiredFilesDelegate, this.onRequiredFilesCompletedDelegate, userState);
        }
        
        public byte[] GetFile(string serverKey, string hardwareKey, string filePath, string fileType, long chunkOffset, long chuckSize, string version) {
            return base.Channel.GetFile(serverKey, hardwareKey, filePath, fileType, chunkOffset, chuckSize, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFile(string serverKey, string hardwareKey, string filePath, string fileType, long chunkOffset, long chuckSize, string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFile(serverKey, hardwareKey, filePath, fileType, chunkOffset, chuckSize, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetFile(System.IAsyncResult result) {
            return base.Channel.EndGetFile(result);
        }
        
        private System.IAsyncResult OnBeginGetFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverKey = ((string)(inValues[0]));
            string hardwareKey = ((string)(inValues[1]));
            string filePath = ((string)(inValues[2]));
            string fileType = ((string)(inValues[3]));
            long chunkOffset = ((long)(inValues[4]));
            long chuckSize = ((long)(inValues[5]));
            string version = ((string)(inValues[6]));
            return this.BeginGetFile(serverKey, hardwareKey, filePath, fileType, chunkOffset, chuckSize, version, callback, asyncState);
        }
        
        private object[] OnEndGetFile(System.IAsyncResult result) {
            byte[] retVal = this.EndGetFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileCompleted(object state) {
            if ((this.GetFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileAsync(string serverKey, string hardwareKey, string filePath, string fileType, long chunkOffset, long chuckSize, string version) {
            this.GetFileAsync(serverKey, hardwareKey, filePath, fileType, chunkOffset, chuckSize, version, null);
        }
        
        public void GetFileAsync(string serverKey, string hardwareKey, string filePath, string fileType, long chunkOffset, long chuckSize, string version, object userState) {
            if ((this.onBeginGetFileDelegate == null)) {
                this.onBeginGetFileDelegate = new BeginOperationDelegate(this.OnBeginGetFile);
            }
            if ((this.onEndGetFileDelegate == null)) {
                this.onEndGetFileDelegate = new EndOperationDelegate(this.OnEndGetFile);
            }
            if ((this.onGetFileCompletedDelegate == null)) {
                this.onGetFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileDelegate, new object[] {
                        serverKey,
                        hardwareKey,
                        filePath,
                        fileType,
                        chunkOffset,
                        chuckSize,
                        version}, this.onEndGetFileDelegate, this.onGetFileCompletedDelegate, userState);
        }
        
        public eAd.DataViewModels.ScheduleModel Schedule(string serverKey, string hardwareKey, string version) {
            return base.Channel.Schedule(serverKey, hardwareKey, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSchedule(string serverKey, string hardwareKey, string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSchedule(serverKey, hardwareKey, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public eAd.DataViewModels.ScheduleModel EndSchedule(System.IAsyncResult result) {
            return base.Channel.EndSchedule(result);
        }
        
        private System.IAsyncResult OnBeginSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverKey = ((string)(inValues[0]));
            string hardwareKey = ((string)(inValues[1]));
            string version = ((string)(inValues[2]));
            return this.BeginSchedule(serverKey, hardwareKey, version, callback, asyncState);
        }
        
        private object[] OnEndSchedule(System.IAsyncResult result) {
            eAd.DataViewModels.ScheduleModel retVal = this.EndSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnScheduleCompleted(object state) {
            if ((this.ScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ScheduleCompleted(this, new ScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ScheduleAsync(string serverKey, string hardwareKey, string version) {
            this.ScheduleAsync(serverKey, hardwareKey, version, null);
        }
        
        public void ScheduleAsync(string serverKey, string hardwareKey, string version, object userState) {
            if ((this.onBeginScheduleDelegate == null)) {
                this.onBeginScheduleDelegate = new BeginOperationDelegate(this.OnBeginSchedule);
            }
            if ((this.onEndScheduleDelegate == null)) {
                this.onEndScheduleDelegate = new EndOperationDelegate(this.OnEndSchedule);
            }
            if ((this.onScheduleCompletedDelegate == null)) {
                this.onScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginScheduleDelegate, new object[] {
                        serverKey,
                        hardwareKey,
                        version}, this.onEndScheduleDelegate, this.onScheduleCompletedDelegate, userState);
        }
        
        public bool RecieveXmlLog(string serverKey, string hardwareKey, string xml, string version) {
            return base.Channel.RecieveXmlLog(serverKey, hardwareKey, xml, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecieveXmlLog(string serverKey, string hardwareKey, string xml, string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecieveXmlLog(serverKey, hardwareKey, xml, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRecieveXmlLog(System.IAsyncResult result) {
            return base.Channel.EndRecieveXmlLog(result);
        }
        
        private System.IAsyncResult OnBeginRecieveXmlLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverKey = ((string)(inValues[0]));
            string hardwareKey = ((string)(inValues[1]));
            string xml = ((string)(inValues[2]));
            string version = ((string)(inValues[3]));
            return this.BeginRecieveXmlLog(serverKey, hardwareKey, xml, version, callback, asyncState);
        }
        
        private object[] OnEndRecieveXmlLog(System.IAsyncResult result) {
            bool retVal = this.EndRecieveXmlLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecieveXmlLogCompleted(object state) {
            if ((this.RecieveXmlLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecieveXmlLogCompleted(this, new RecieveXmlLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecieveXmlLogAsync(string serverKey, string hardwareKey, string xml, string version) {
            this.RecieveXmlLogAsync(serverKey, hardwareKey, xml, version, null);
        }
        
        public void RecieveXmlLogAsync(string serverKey, string hardwareKey, string xml, string version, object userState) {
            if ((this.onBeginRecieveXmlLogDelegate == null)) {
                this.onBeginRecieveXmlLogDelegate = new BeginOperationDelegate(this.OnBeginRecieveXmlLog);
            }
            if ((this.onEndRecieveXmlLogDelegate == null)) {
                this.onEndRecieveXmlLogDelegate = new EndOperationDelegate(this.OnEndRecieveXmlLog);
            }
            if ((this.onRecieveXmlLogCompletedDelegate == null)) {
                this.onRecieveXmlLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecieveXmlLogCompleted);
            }
            base.InvokeAsync(this.onBeginRecieveXmlLogDelegate, new object[] {
                        serverKey,
                        hardwareKey,
                        xml,
                        version}, this.onEndRecieveXmlLogDelegate, this.onRecieveXmlLogCompletedDelegate, userState);
        }
        
        public void BlackList(string serverKey, string hardwareKey, int mediaId, string type, string reason, string version) {
            base.Channel.BlackList(serverKey, hardwareKey, mediaId, type, reason, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBlackList(string serverKey, string hardwareKey, int mediaId, string type, string reason, string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBlackList(serverKey, hardwareKey, mediaId, type, reason, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndBlackList(System.IAsyncResult result) {
            base.Channel.EndBlackList(result);
        }
        
        private System.IAsyncResult OnBeginBlackList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverKey = ((string)(inValues[0]));
            string hardwareKey = ((string)(inValues[1]));
            int mediaId = ((int)(inValues[2]));
            string type = ((string)(inValues[3]));
            string reason = ((string)(inValues[4]));
            string version = ((string)(inValues[5]));
            return this.BeginBlackList(serverKey, hardwareKey, mediaId, type, reason, version, callback, asyncState);
        }
        
        private object[] OnEndBlackList(System.IAsyncResult result) {
            this.EndBlackList(result);
            return null;
        }
        
        private void OnBlackListCompleted(object state) {
            if ((this.BlackListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BlackListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BlackListAsync(string serverKey, string hardwareKey, int mediaId, string type, string reason, string version) {
            this.BlackListAsync(serverKey, hardwareKey, mediaId, type, reason, version, null);
        }
        
        public void BlackListAsync(string serverKey, string hardwareKey, int mediaId, string type, string reason, string version, object userState) {
            if ((this.onBeginBlackListDelegate == null)) {
                this.onBeginBlackListDelegate = new BeginOperationDelegate(this.OnBeginBlackList);
            }
            if ((this.onEndBlackListDelegate == null)) {
                this.onEndBlackListDelegate = new EndOperationDelegate(this.OnEndBlackList);
            }
            if ((this.onBlackListCompletedDelegate == null)) {
                this.onBlackListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBlackListCompleted);
            }
            base.InvokeAsync(this.onBeginBlackListDelegate, new object[] {
                        serverKey,
                        hardwareKey,
                        mediaId,
                        type,
                        reason,
                        version}, this.onEndBlackListDelegate, this.onBlackListCompletedDelegate, userState);
        }
        
        public bool SubmitLog(string version, string serverKey, string hardwareKey, string logXml) {
            return base.Channel.SubmitLog(version, serverKey, hardwareKey, logXml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubmitLog(string version, string serverKey, string hardwareKey, string logXml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubmitLog(version, serverKey, hardwareKey, logXml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSubmitLog(System.IAsyncResult result) {
            return base.Channel.EndSubmitLog(result);
        }
        
        private System.IAsyncResult OnBeginSubmitLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string version = ((string)(inValues[0]));
            string serverKey = ((string)(inValues[1]));
            string hardwareKey = ((string)(inValues[2]));
            string logXml = ((string)(inValues[3]));
            return this.BeginSubmitLog(version, serverKey, hardwareKey, logXml, callback, asyncState);
        }
        
        private object[] OnEndSubmitLog(System.IAsyncResult result) {
            bool retVal = this.EndSubmitLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubmitLogCompleted(object state) {
            if ((this.SubmitLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubmitLogCompleted(this, new SubmitLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubmitLogAsync(string version, string serverKey, string hardwareKey, string logXml) {
            this.SubmitLogAsync(version, serverKey, hardwareKey, logXml, null);
        }
        
        public void SubmitLogAsync(string version, string serverKey, string hardwareKey, string logXml, object userState) {
            if ((this.onBeginSubmitLogDelegate == null)) {
                this.onBeginSubmitLogDelegate = new BeginOperationDelegate(this.OnBeginSubmitLog);
            }
            if ((this.onEndSubmitLogDelegate == null)) {
                this.onEndSubmitLogDelegate = new EndOperationDelegate(this.OnEndSubmitLog);
            }
            if ((this.onSubmitLogCompletedDelegate == null)) {
                this.onSubmitLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubmitLogCompleted);
            }
            base.InvokeAsync(this.onBeginSubmitLogDelegate, new object[] {
                        version,
                        serverKey,
                        hardwareKey,
                        logXml}, this.onEndSubmitLogDelegate, this.onSubmitLogCompletedDelegate, userState);
        }
        
        public bool SubmitStats(string version, string serverKey, string hardwareKey, string statXml) {
            return base.Channel.SubmitStats(version, serverKey, hardwareKey, statXml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubmitStats(string version, string serverKey, string hardwareKey, string statXml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubmitStats(version, serverKey, hardwareKey, statXml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSubmitStats(System.IAsyncResult result) {
            return base.Channel.EndSubmitStats(result);
        }
        
        private System.IAsyncResult OnBeginSubmitStats(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string version = ((string)(inValues[0]));
            string serverKey = ((string)(inValues[1]));
            string hardwareKey = ((string)(inValues[2]));
            string statXml = ((string)(inValues[3]));
            return this.BeginSubmitStats(version, serverKey, hardwareKey, statXml, callback, asyncState);
        }
        
        private object[] OnEndSubmitStats(System.IAsyncResult result) {
            bool retVal = this.EndSubmitStats(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubmitStatsCompleted(object state) {
            if ((this.SubmitStatsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubmitStatsCompleted(this, new SubmitStatsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubmitStatsAsync(string version, string serverKey, string hardwareKey, string statXml) {
            this.SubmitStatsAsync(version, serverKey, hardwareKey, statXml, null);
        }
        
        public void SubmitStatsAsync(string version, string serverKey, string hardwareKey, string statXml, object userState) {
            if ((this.onBeginSubmitStatsDelegate == null)) {
                this.onBeginSubmitStatsDelegate = new BeginOperationDelegate(this.OnBeginSubmitStats);
            }
            if ((this.onEndSubmitStatsDelegate == null)) {
                this.onEndSubmitStatsDelegate = new EndOperationDelegate(this.OnEndSubmitStats);
            }
            if ((this.onSubmitStatsCompletedDelegate == null)) {
                this.onSubmitStatsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubmitStatsCompleted);
            }
            base.InvokeAsync(this.onBeginSubmitStatsDelegate, new object[] {
                        version,
                        serverKey,
                        hardwareKey,
                        statXml}, this.onEndSubmitStatsDelegate, this.onSubmitStatsCompletedDelegate, userState);
        }
        
        public bool MediaInventory(string version, string serverKey, string hardwareKey, string mediaInventory1) {
            return base.Channel.MediaInventory(version, serverKey, hardwareKey, mediaInventory1);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMediaInventory(string version, string serverKey, string hardwareKey, string mediaInventory1, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMediaInventory(version, serverKey, hardwareKey, mediaInventory1, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndMediaInventory(System.IAsyncResult result) {
            return base.Channel.EndMediaInventory(result);
        }
        
        private System.IAsyncResult OnBeginMediaInventory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string version = ((string)(inValues[0]));
            string serverKey = ((string)(inValues[1]));
            string hardwareKey = ((string)(inValues[2]));
            string mediaInventory1 = ((string)(inValues[3]));
            return this.BeginMediaInventory(version, serverKey, hardwareKey, mediaInventory1, callback, asyncState);
        }
        
        private object[] OnEndMediaInventory(System.IAsyncResult result) {
            bool retVal = this.EndMediaInventory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMediaInventoryCompleted(object state) {
            if ((this.MediaInventoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MediaInventoryCompleted(this, new MediaInventoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MediaInventoryAsync(string version, string serverKey, string hardwareKey, string mediaInventory1) {
            this.MediaInventoryAsync(version, serverKey, hardwareKey, mediaInventory1, null);
        }
        
        public void MediaInventoryAsync(string version, string serverKey, string hardwareKey, string mediaInventory1, object userState) {
            if ((this.onBeginMediaInventoryDelegate == null)) {
                this.onBeginMediaInventoryDelegate = new BeginOperationDelegate(this.OnBeginMediaInventory);
            }
            if ((this.onEndMediaInventoryDelegate == null)) {
                this.onEndMediaInventoryDelegate = new EndOperationDelegate(this.OnEndMediaInventory);
            }
            if ((this.onMediaInventoryCompletedDelegate == null)) {
                this.onMediaInventoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMediaInventoryCompleted);
            }
            base.InvokeAsync(this.onBeginMediaInventoryDelegate, new object[] {
                        version,
                        serverKey,
                        hardwareKey,
                        mediaInventory1}, this.onEndMediaInventoryDelegate, this.onMediaInventoryCompletedDelegate, userState);
        }
        
        public string GetResource(string serverKey, string hardwareKey, int layoutId, string regionId, string mediaId, string version) {
            return base.Channel.GetResource(serverKey, hardwareKey, layoutId, regionId, mediaId, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetResource(string serverKey, string hardwareKey, int layoutId, string regionId, string mediaId, string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetResource(serverKey, hardwareKey, layoutId, regionId, mediaId, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetResource(System.IAsyncResult result) {
            return base.Channel.EndGetResource(result);
        }
        
        private System.IAsyncResult OnBeginGetResource(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverKey = ((string)(inValues[0]));
            string hardwareKey = ((string)(inValues[1]));
            int layoutId = ((int)(inValues[2]));
            string regionId = ((string)(inValues[3]));
            string mediaId = ((string)(inValues[4]));
            string version = ((string)(inValues[5]));
            return this.BeginGetResource(serverKey, hardwareKey, layoutId, regionId, mediaId, version, callback, asyncState);
        }
        
        private object[] OnEndGetResource(System.IAsyncResult result) {
            string retVal = this.EndGetResource(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetResourceCompleted(object state) {
            if ((this.GetResourceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetResourceCompleted(this, new GetResourceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetResourceAsync(string serverKey, string hardwareKey, int layoutId, string regionId, string mediaId, string version) {
            this.GetResourceAsync(serverKey, hardwareKey, layoutId, regionId, mediaId, version, null);
        }
        
        public void GetResourceAsync(string serverKey, string hardwareKey, int layoutId, string regionId, string mediaId, string version, object userState) {
            if ((this.onBeginGetResourceDelegate == null)) {
                this.onBeginGetResourceDelegate = new BeginOperationDelegate(this.OnBeginGetResource);
            }
            if ((this.onEndGetResourceDelegate == null)) {
                this.onEndGetResourceDelegate = new EndOperationDelegate(this.OnEndGetResource);
            }
            if ((this.onGetResourceCompletedDelegate == null)) {
                this.onGetResourceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetResourceCompleted);
            }
            base.InvokeAsync(this.onBeginGetResourceDelegate, new object[] {
                        serverKey,
                        hardwareKey,
                        layoutId,
                        regionId,
                        mediaId,
                        version}, this.onEndGetResourceDelegate, this.onGetResourceCompletedDelegate, userState);
        }
    }
}
